// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get _msgSender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get beneficiaries(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class BuyForGift extends ethereum.Event {
  get params(): BuyForGift__Params {
    return new BuyForGift__Params(this);
  }
}

export class BuyForGift__Params {
  _event: BuyForGift;

  constructor(event: BuyForGift) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get _msgSender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _transferTo(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get beneficiaries(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }
}

export class BuyFreeClaim extends ethereum.Event {
  get params(): BuyFreeClaim__Params {
    return new BuyFreeClaim__Params(this);
  }
}

export class BuyFreeClaim__Params {
  _event: BuyFreeClaim;

  constructor(event: BuyFreeClaim) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _msgSender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _msgSender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaperPurchase extends ethereum.Event {
  get params(): PaperPurchase__Params {
    return new PaperPurchase__Params(this);
  }
}

export class PaperPurchase__Params {
  _event: PaperPurchase;

  constructor(event: PaperPurchase) {
    this._event = event;
  }

  get _paymentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _msgSender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class SellFreeClaim extends ethereum.Event {
  get params(): SellFreeClaim__Params {
    return new SellFreeClaim__Params(this);
  }
}

export class SellFreeClaim__Params {
  _event: SellFreeClaim;

  constructor(event: SellFreeClaim) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _msgSender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class SetFee extends ethereum.Event {
  get params(): SetFee__Params {
    return new SetFee__Params(this);
  }
}

export class SetFee__Params {
  _event: SetFee;

  constructor(event: SetFee) {
    this._event = event;
  }

  get _oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetFeeOwner extends ethereum.Event {
  get params(): SetFeeOwner__Params {
    return new SetFeeOwner__Params(this);
  }
}

export class SetFeeOwner__Params {
  _event: SetFeeOwner;

  constructor(event: SetFeeOwner) {
    this._event = event;
  }

  get _oldFeeOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newFeeOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetPrice extends ethereum.Event {
  get params(): SetPrice__Params {
    return new SetPrice__Params(this);
  }
}

export class SetPrice__Params {
  _event: SetPrice;

  constructor(event: SetPrice) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DGLiveMarketplace__orderbookResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;

  constructor(value0: boolean, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getActive(): boolean {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getBeneficiary(): Address {
    return this.value2;
  }
}

export class DGLiveMarketplace extends ethereum.SmartContract {
  static bind(address: Address): DGLiveMarketplace {
    return new DGLiveMarketplace("DGLiveMarketplace", address);
  }

  BASE_FEE(): BigInt {
    let result = super.call("BASE_FEE", "BASE_FEE():(uint32)", []);

    return result[0].toBigInt();
  }

  try_BASE_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_FEE", "BASE_FEE():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDC_token(): Address {
    let result = super.call("USDC_token", "USDC_token():(address)", []);

    return result[0].toAddress();
  }

  try_USDC_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC_token", "USDC_token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptedToken(): Address {
    let result = super.call("acceptedToken", "acceptedToken():(address)", []);

    return result[0].toAddress();
  }

  try_acceptedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "acceptedToken",
      "acceptedToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  backWallet(): Address {
    let result = super.call("backWallet", "backWallet():(address)", []);

    return result[0].toAddress();
  }

  try_backWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("backWallet", "backWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimKeeper(param0: Address, param1: Address): boolean {
    let result = super.call(
      "claimKeeper",
      "claimKeeper(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_claimKeeper(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimKeeper",
      "claimKeeper(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint32)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeOwner(): Address {
    let result = super.call("feeOwner", "feeOwner():(address)", []);

    return result[0].toAddress();
  }

  try_feeOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeOwner", "feeOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  freeClaimCost(): BigInt {
    let result = super.call("freeClaimCost", "freeClaimCost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_freeClaimCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "freeClaimCost",
      "freeClaimCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonce(_user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(_nftAddress: Address, _tokenId: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_nftAddress),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(_nftAddress: Address, _tokenId: BigInt): boolean {
    let result = super.call("isActive", "isActive(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_nftAddress),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_nftAddress),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBlacklisted(param0: Address): boolean {
    let result = super.call("isBlacklisted", "isBlacklisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isBlacklisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlacklisted",
      "isBlacklisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minPrice(): BigInt {
    let result = super.call("minPrice", "minPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minPrice", "minPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  orderbook(
    param0: Address,
    param1: BigInt
  ): DGLiveMarketplace__orderbookResult {
    let result = super.call(
      "orderbook",
      "orderbook(address,uint256):(bool,uint256,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new DGLiveMarketplace__orderbookResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_orderbook(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<DGLiveMarketplace__orderbookResult> {
    let result = super.tryCall(
      "orderbook",
      "orderbook(address,uint256):(bool,uint256,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DGLiveMarketplace__orderbookResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BlackListCall extends ethereum.Call {
  get inputs(): BlackListCall__Inputs {
    return new BlackListCall__Inputs(this);
  }

  get outputs(): BlackListCall__Outputs {
    return new BlackListCall__Outputs(this);
  }
}

export class BlackListCall__Inputs {
  _call: BlackListCall;

  constructor(call: BlackListCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BlackListCall__Outputs {
  _call: BlackListCall;

  constructor(call: BlackListCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class BuyForGiftCall extends ethereum.Call {
  get inputs(): BuyForGiftCall__Inputs {
    return new BuyForGiftCall__Inputs(this);
  }

  get outputs(): BuyForGiftCall__Outputs {
    return new BuyForGiftCall__Outputs(this);
  }
}

export class BuyForGiftCall__Inputs {
  _call: BuyForGiftCall;

  constructor(call: BuyForGiftCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _transferTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BuyForGiftCall__Outputs {
  _call: BuyForGiftCall;

  constructor(call: BuyForGiftCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PaperCallbackCall extends ethereum.Call {
  get inputs(): PaperCallbackCall__Inputs {
    return new PaperCallbackCall__Inputs(this);
  }

  get outputs(): PaperCallbackCall__Outputs {
    return new PaperCallbackCall__Outputs(this);
  }
}

export class PaperCallbackCall__Inputs {
  _call: PaperCallbackCall;

  constructor(call: PaperCallbackCall) {
    this._call = call;
  }

  get paymentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _transferTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _nonce(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PaperCallbackCall__Outputs {
  _call: PaperCallbackCall;

  constructor(call: PaperCallbackCall) {
    this._call = call;
  }
}

export class RegisterPaperKeyCall extends ethereum.Call {
  get inputs(): RegisterPaperKeyCall__Inputs {
    return new RegisterPaperKeyCall__Inputs(this);
  }

  get outputs(): RegisterPaperKeyCall__Outputs {
    return new RegisterPaperKeyCall__Outputs(this);
  }
}

export class RegisterPaperKeyCall__Inputs {
  _call: RegisterPaperKeyCall;

  constructor(call: RegisterPaperKeyCall) {
    this._call = call;
  }

  get _paperKey(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterPaperKeyCall__Outputs {
  _call: RegisterPaperKeyCall;

  constructor(call: RegisterPaperKeyCall) {
    this._call = call;
  }
}

export class RemoveFromBlacklistCall extends ethereum.Call {
  get inputs(): RemoveFromBlacklistCall__Inputs {
    return new RemoveFromBlacklistCall__Inputs(this);
  }

  get outputs(): RemoveFromBlacklistCall__Outputs {
    return new RemoveFromBlacklistCall__Outputs(this);
  }
}

export class RemoveFromBlacklistCall__Inputs {
  _call: RemoveFromBlacklistCall;

  constructor(call: RemoveFromBlacklistCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromBlacklistCall__Outputs {
  _call: RemoveFromBlacklistCall;

  constructor(call: RemoveFromBlacklistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }
}

export class SetBackWalletCall extends ethereum.Call {
  get inputs(): SetBackWalletCall__Inputs {
    return new SetBackWalletCall__Inputs(this);
  }

  get outputs(): SetBackWalletCall__Outputs {
    return new SetBackWalletCall__Outputs(this);
  }
}

export class SetBackWalletCall__Inputs {
  _call: SetBackWalletCall;

  constructor(call: SetBackWalletCall) {
    this._call = call;
  }

  get _backWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBackWalletCall__Outputs {
  _call: SetBackWalletCall;

  constructor(call: SetBackWalletCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeOwnerCall extends ethereum.Call {
  get inputs(): SetFeeOwnerCall__Inputs {
    return new SetFeeOwnerCall__Inputs(this);
  }

  get outputs(): SetFeeOwnerCall__Outputs {
    return new SetFeeOwnerCall__Outputs(this);
  }
}

export class SetFeeOwnerCall__Inputs {
  _call: SetFeeOwnerCall;

  constructor(call: SetFeeOwnerCall) {
    this._call = call;
  }

  get _newFeeOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeOwnerCall__Outputs {
  _call: SetFeeOwnerCall;

  constructor(call: SetFeeOwnerCall) {
    this._call = call;
  }
}

export class SetFreeClaimCostCall extends ethereum.Call {
  get inputs(): SetFreeClaimCostCall__Inputs {
    return new SetFreeClaimCostCall__Inputs(this);
  }

  get outputs(): SetFreeClaimCostCall__Outputs {
    return new SetFreeClaimCostCall__Outputs(this);
  }
}

export class SetFreeClaimCostCall__Inputs {
  _call: SetFreeClaimCostCall;

  constructor(call: SetFreeClaimCostCall) {
    this._call = call;
  }

  get _freeClaimCost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFreeClaimCostCall__Outputs {
  _call: SetFreeClaimCostCall;

  constructor(call: SetFreeClaimCostCall) {
    this._call = call;
  }
}

export class SetMinPriceCall extends ethereum.Call {
  get inputs(): SetMinPriceCall__Inputs {
    return new SetMinPriceCall__Inputs(this);
  }

  get outputs(): SetMinPriceCall__Outputs {
    return new SetMinPriceCall__Outputs(this);
  }
}

export class SetMinPriceCall__Inputs {
  _call: SetMinPriceCall;

  constructor(call: SetMinPriceCall) {
    this._call = call;
  }

  get newMinPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinPriceCall__Outputs {
  _call: SetMinPriceCall;

  constructor(call: SetMinPriceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawERC20Call extends ethereum.Call {
  get inputs(): WithdrawERC20Call__Inputs {
    return new WithdrawERC20Call__Inputs(this);
  }

  get outputs(): WithdrawERC20Call__Outputs {
    return new WithdrawERC20Call__Outputs(this);
  }
}

export class WithdrawERC20Call__Inputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawERC20Call__Outputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }
}

export class WithdrawERC721Call extends ethereum.Call {
  get inputs(): WithdrawERC721Call__Inputs {
    return new WithdrawERC721Call__Inputs(this);
  }

  get outputs(): WithdrawERC721Call__Outputs {
    return new WithdrawERC721Call__Outputs(this);
  }
}

export class WithdrawERC721Call__Inputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawERC721Call__Outputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }
}
